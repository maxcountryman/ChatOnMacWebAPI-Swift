//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

extension ChatOnMacWebAPI {


open class DefaultAPI {

    /**

     - parameter receipt: (query)  
     - returns: QueryBalance200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func queryBalance(receipt: String) async throws -> QueryBalance200Response {
        return try await queryBalanceWithRequestBuilder(receipt: receipt).execute().body
    }

    /**
     - GET /balance
     - parameter receipt: (query)  
     - returns: RequestBuilder<QueryBalance200Response> 
     */
    open class func queryBalanceWithRequestBuilder(receipt: String) -> RequestBuilder<QueryBalance200Response> {
        let localVariablePath = "/balance"
        let localVariableURLString = ChatOnMacWebAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "receipt": (wrappedValue: receipt.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryBalance200Response>.Type = ChatOnMacWebAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter prompt: (query)  
     - parameter receipt: (query)  
     - returns: QueryChat200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func queryChat(prompt: String, receipt: String) async throws -> QueryChat200Response {
        return try await queryChatWithRequestBuilder(prompt: prompt, receipt: receipt).execute().body
    }

    /**
     - GET /chat
     - parameter prompt: (query)  
     - parameter receipt: (query)  
     - returns: RequestBuilder<QueryChat200Response> 
     */
    open class func queryChatWithRequestBuilder(prompt: String, receipt: String) -> RequestBuilder<QueryChat200Response> {
        let localVariablePath = "/chat"
        let localVariableURLString = ChatOnMacWebAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "prompt": (wrappedValue: prompt.encodeToJSON(), isExplode: true),
            "receipt": (wrappedValue: receipt.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryChat200Response>.Type = ChatOnMacWebAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
}
